grammar msi.gama.lang.gaml.Gaml hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate gaml "http://www.gama.msi/lang/gaml/Gaml"

Entry:
	Model | StringEvaluator ;



StringEvaluator:
	toto=ID "<-" expr=Expression;


Model:
	(pragmas +=Pragma)* 'model' name=ID  (imports+=Import)* block=ModelBlock;

ModelBlock returns Block:
	{Block} (statements+=(S_Section))*
;

Import:
	'import' importURI=STRING ("as" name=Valid_ID)?; // must be named importURI
	
Pragma:
	'@' name=ID
;

/**
 * Global statements
 */

S_Section returns Statement:
	 S_Global | S_Species | S_Experiment 
;

S_Global :
	key="global" (facets+=Facet)* (block=Block | ';')
;

S_Species :
	(key=_SpeciesKey name=ID (facets+=Facet)* (block=Block | ';'));

S_Experiment :
	key="experiment" name=(Valid_ID | STRING) (facets+=Facet)* (block=ExperimentBlock | ';');

/**
 * Statements
 */
Statement:
	
	(
		=> S_Other 
		| 
		S_Declaration 
		| 
		(
			(
				=> S_Assignment  
				| S_Do 
				| S_Return 
				| S_Solve 
				| S_If 
				| S_Equations
			)
		)
	)
;

//S_1Expr_Facets_BlockOrEnd returns Statement:
//	key=_1Expr_Facets_BlockOrEnd_Key expr=Expression (facets+=Facet)* (block=Block | ";");

S_Do:
	key=_DoKey expr=AbstractRef (facets+=Facet)* (block=Block | ';');

S_Loop:
	key="loop" (name=ID)? (facets+=Facet)* block=Block;

S_If:
	key='if' expr=Expression block=Block (=> 'else' else=(S_If | Block))?;

S_Other:
	key=ID (expr=Expression)? (facets+=Facet)* (block=Block | ';');

S_Return:
	key='return' expr=Expression? ';';


	/*
 * DECLARATIONS
 */
S_Declaration:
	=>S_Definition | S_Species | S_Reflex | S_Action  | S_Loop  ; // S_Var

S_Reflex:
	key=_ReflexKey name=ID? ("when"":" expr=Expression)? block=Block;

S_Definition:
	tkey=(TypeRef) name=(Valid_ID | STRING) ('(' (args=ActionArguments) ')')? (facets+=Facet)* (block=Block | ';');

S_Action returns S_Definition:
	{S_Action} key="action" name=Valid_ID ('(' (args=ActionArguments) ')')? (facets+=Facet)* (block=Block | ';');

//S_Var returns S_Definition:
//	{S_Var} key=_VarOrConstKey (firstFacet="name:")? name=Valid_ID (facets+=Facet)* ';';


	/*
 * ASSIGNMENTS
 */
S_Assignment:
	(expr=Expression key=(_AssignmentKey) value=Expression (facets+=Facet)*) ';';

S_Equations:
	key=_EquationsKey name=Valid_ID (facets+=Facet)* ('{' (equations+=S_Equation ';')* '}' | ';');

S_Equation returns S_Assignment:
	expr=(Function|VariableRef) key="=" value=Expression;

S_Solve:
	key=_SolveKey expr=EquationRef (facets+=Facet)* (block=Block | ';');



/**
 * DISPLAYS
 */

//S_Monitor :
//	key="monitor" (firstFacet="name:")? name=(Valid_ID|STRING) facets+=Facet ";"
//;

S_Display:
	key="display" name=(Valid_ID|STRING) (facets+=Facet)* block=Block
;

//displayBlock returns Block:
//	{Block} '{' (statements+=displayStatement)* '}'
//;

ExperimentBlock returns Block:
	{Block} '{' (statements+=experimentStatement)* '}'
;

experimentStatement returns Statement:
	Statement | S_Output
;


S_Output returns Statement:
	key=("output"|"permanent") block=outputBlock
;

outputBlock returns Block:
	{Block} '{' (statements += outputStatement)* '}'
;

outputStatement returns Statement
	:
	Statement 
	| 
	S_Display 
//	| 
//	S_Monitor
	
	;
//displayStatement returns Statement:
//	speciesOrGridDisplayStatement | Statement
//;

//speciesOrGridDisplayStatement:
//	key=_SpeciesKey expr=Expression (facets+=Facet)* (block=displayBlock | ";")
//;

	/**
 * Statement keys 
 */
_EquationsKey: 
	"equation";

_SolveKey:
	"solve";

_SpeciesKey:
	"species" | "grid";

//_1Expr_Facets_BlockOrEnd_Key:
//	_LayerKey | "ask" | "release" | "capture" | "create" | "write" | "error" | "warn" | "exception" | "save" | "assert" | "inspect" | "browse" |
//	"draw"  | "using" | "switch" | "put" | "add" | "remove" | "match" | "match_between" | "match_one" | "parameter" | "status";
//
//_LayerKey:
//	"text" | "image" | "data" | "chart" | "agents" | "graphics" | "display_population" | "display_grid" |  "event" | "overlay" | "datalist" | "camera" | "light"
//;
_DoKey:
	"do";


_ReflexKey:
	"init" | "reflex" | "aspect";

_AssignmentKey:
	"<-" | "<<" | '>' '>' | "<<+" | '>''>-' | "+<-" | "<+" | ">-" ;

	/**
 * Parameters and arguments
 */
Parameters:
	{Parameters} (params=ParameterList)?;

ActionArguments:
	args+=ArgumentDefinition (',' args+=ArgumentDefinition)*;

ArgumentDefinition:
	type=(TypeRef) name=Valid_ID ('<-' default=Expression)?;

	/**
 * Facets
 */
Facet:
	DefinitionFacet | FunctionFacet | ClassicFacet | TypeFacet | VarFacet | ActionFacet;

ClassicFacetKey: ID ':';

DefinitionFacetKey:
	/*"name:" |*/ "returns:" ; /*| "var:" */

TypeFacetKey:
	("as:" | "of:" | "parent:" | "species:"|"type:");
//	"as:" | "of:" | "type:" | 'parent:' | 'species:';


SpecialFacetKey:
	'data:' | 'when'':' | "const:" | "value:" | "topology:" | "item:" | "init:" | "message:" | "control:" |
	"environment:" | 'text:' | 'image:' | 'using:' | "parameter:" | "aspect:";

ActionFacetKey:
	"action:";

VarFacetKey:
	"var:";

ClassicFacet returns Facet:
	(key=ClassicFacetKey | key='<-' | key=SpecialFacetKey) expr=Expression;

DefinitionFacet returns Facet:
	((=> key=DefinitionFacetKey) name=(Valid_ID));

FunctionFacet returns Facet:
	(key='function:' | key='->') '{' expr=Expression '}';

TypeFacet returns Facet:
	key=TypeFacetKey (=>(expr=TypeRef) | expr= Expression);

ActionFacet returns Facet:
	key=ActionFacetKey expr=ActionRef;

VarFacet returns Facet:
	key= VarFacetKey expr=VariableRef;


	/**
 * Blocks. An ordered list of statements inside curly brackets
 */
Block:
	{Block} '{'
	(=> ((function=Expression) '}') | ((statements+=Statement)* '}'));

	/**
 * Expressions
 */
Expression:
	ArgumentPair | Pair;

ArgumentPair:
	=> (op=(Valid_ID) '::' | op=(DefinitionFacetKey | TypeFacetKey  | SpecialFacetKey | ActionFacetKey | VarFacetKey) ':')? right=If;


Pair returns Expression:
	If
	(({Pair.left=current}
	op='::')
	right=If)?;

If returns Expression:
	Or
	({If.left=current}
	op='?'
	right=Or
	(':'
	ifFalse=Or))?;


Or returns Expression:
	And
	({Expression.left=current}
	op='or'
	right=And)*;

And returns Expression:
	Cast
	({Expression.left=current}
	op='and'
	right=Cast)*;

Cast returns Expression:
	Comparison
	(({Cast.left = current}
		op='as'
	) ((right= TypeRef) | ('(' right=TypeRef ')') ))?
;

Comparison returns Expression:
	Addition
	(({Expression.left=current}
	op=('!=' | '=' | '>=' | '<=' | '<' | '>'))
	right=Addition)?;

Addition returns Expression:
	Multiplication
	(({Expression.left=current} op=('+' | '-'))
	right=Multiplication)*;

Multiplication returns Expression:
	Exponentiation
	(({Expression.left=current} op=('*' | '/' )) right=Exponentiation)*;

Exponentiation returns Expression:
	Binary
	(({Expression.left=current} op=('^')) right=Binary)*
;

Binary returns Expression:
	Unit
	(({Binary.left=current} op=(Valid_ID)) right=Unit)*;

	// NEW: Units are now expressed using the "°" symbol
Unit returns Expression:
	Unary
	(({Unit.left=current} op=('°'|"#")) right=UnitRef)?;

Unary returns Expression:
	Access |
	{Unary} ((op=('°'|'#') right=UnitRef) | (op=('-' | '!' | 'my' | 'the' | 'not')
	right=Unary));

Access returns Expression:
	Primary ({Access.left = current} (
		(op='[' args=ExpressionList? ']') | (op="." right=AbstractRef) | (op="." named_exp=STRING)
	))*
;



Primary returns Expression:
	TerminalExpression |
	AbstractRef |
	'(' ExpressionList ')' |
	'(' {Parameters} (params=ParameterList)? ')' |
	'[' {Array} exprs=ExpressionList? ']' |
	'{' {Point} left=Expression op=',' right=Expression (',' z=Expression)? '}';

AbstractRef returns Expression:
	Function | (=>CastingFunction | VariableRef);

Function returns Expression:
	{Function} (action=ActionRef) '(' (parameters=Parameters | args=ExpressionList) ')';

CastingFunction returns Function:
	action=ActionRef type=TypeInfo "(" args=ExpressionList ')';


Parameter returns Expression:
	{Parameter} ((builtInFacetKey=(DefinitionFacetKey | TypeFacetKey  | SpecialFacetKey | ActionFacetKey | VarFacetKey)) |
	(left=VariableRef ':')) right=Expression;

ExpressionList:
	exprs+=Expression (',' exprs+=Expression)*;

ParameterList returns ExpressionList:
	exprs+=Parameter (',' exprs+=Parameter)*;

UnitRef returns Expression:
	{UnitName} ref=[UnitFakeDefinition|ID];

VariableRef:
	{VariableRef} ref=[VarDefinition|Valid_ID];

TypeRef returns Expression:
	{TypeRef} (ref=[TypeDefinition|ID] parameter=TypeInfo?) | {TypeRef} ("species" parameter=TypeInfo) ;

TypeInfo:
	('<' first=TypeRef ("," second=TypeRef)? =>'>')
;
SkillRef returns Expression:
	{SkillRef} ref=[SkillFakeDefinition|ID];

ActionRef returns Expression:
	{ActionRef} ref=[ActionDefinition|Valid_ID];

EquationRef returns Expression:
	{EquationRef} ref=[EquationDefinition|Valid_ID];

GamlDefinition:
	TypeDefinition | VarDefinition | UnitFakeDefinition | SkillFakeDefinition | ActionDefinition | EquationDefinition;

EquationDefinition:
	S_Equations | EquationFakeDefinition;

TypeDefinition:
	S_Species /*| S_Experiment |*/| TypeFakeDefinition;


VarDefinition:
	=>S_Declaration | (Model | ArgumentDefinition | DefinitionFacet | VarFakeDefinition | Import | S_Experiment);

ActionDefinition:
	S_Action | ActionFakeDefinition | S_Definition | TypeDefinition;

	// Fake Definitions produced by the global scope provider
UnitFakeDefinition:
	'**unit*' name=ID;

TypeFakeDefinition:
	'**type*' name=ID;

ActionFakeDefinition:
	'**action*' name=Valid_ID;

SkillFakeDefinition:
	'**skill*' name=ID;

VarFakeDefinition:
	'**var*' name=Valid_ID;

EquationFakeDefinition:
	'**equation*' name=Valid_ID;

Valid_ID:
	ID; // _VarOrConsKey

	/**
 * Terminals
 */
TerminalExpression:
	{IntLiteral} op=INTEGER |
	{DoubleLiteral} op=DOUBLE |
	{ColorLiteral} op=COLOR |
	{StringLiteral} op=STRING |
	{BooleanLiteral} op=BOOLEAN |
	{ReservedLiteral} op=KEYWORD;

terminal KEYWORD:
	'each' | 'self' | 'myself' | 'nil' | 'world' | 'user_location';

terminal INTEGER:
	'0' | ('1'..'9' ('0'..'9')*);

terminal BOOLEAN:
	'true' | 'false';

terminal ID:
	('a'..'z' | 'A'..'Z' | '_' | '$') ('a'..'z' | 'A'..'Z' | '_' | '$' | '0'..'9')*;

terminal COLOR:
	'#' ('0'..'9' | 'A'..'F')+;

terminal DOUBLE:
	'1'..'9' ('0'..'9')* ('.' '0'..'9'+)? (('E' | 'e') ('+' | '-')? '0'..'9'+)? | '0' ('.' '0'..'9'+)? (('E' | 'e') ('+' |
'-')? '0'..'9'+)?;

terminal STRING:
	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | '\\') | !('\\' | '"'))* '"' | "'" ('\\' ('b' | 't' | 'n' | 'f' |
	'r' | 'u' | "'" | '\\') | !('\\' | "'"))* "'";

terminal ML_COMMENT:
	'/*'->'*/';

terminal SL_COMMENT:
	'//' !('\n' | '\r')* ('\r'? '\n')?;

terminal WS:
	(' ' | '\t' | '\r' | '\n')+;

terminal ANY_OTHER:
	.;
